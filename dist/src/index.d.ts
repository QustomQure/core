/// <reference types="node" />
import { Contract, Wallet } from "ethers";
import { Bundle, BundleInstructions, BundleProposal } from "./faces";
import { CLI } from "./utils";
import { KyveBundlr } from "./utils/bundlr";
import client from "prom-client";
import { Database } from "./utils/database";
export * from "./utils";
export * from "./faces";
export * from "./utils/helpers";
export * from "./utils/database";
export * from "./utils/progress";
declare class KYVE {
    protected pool: Contract;
    protected runtime: string;
    protected version: string;
    protected stake: string;
    protected commission: string;
    protected wallet: Wallet;
    protected name: string;
    protected gasMultiplier: string;
    protected poolState: any;
    protected runMetrics: boolean;
    protected space: number;
    protected db: Database;
    protected bundlr: KyveBundlr;
    static metrics: typeof client;
    constructor(cli?: CLI);
    start(): Promise<void>;
    private run;
    worker(): Promise<void>;
    requestWorkerBatch(workerHeight: number): Promise<any[]>;
    createBundle(bundleInstructions: BundleInstructions): Promise<Bundle>;
    loadBundle(bundleProposal: BundleProposal): Promise<Buffer>;
    private clearFinalizedData;
    private validateProposal;
    validate(uploadBundle: Buffer, uploadBytes: number, downloadBundle: Buffer, downloadBytes: number): Promise<boolean>;
    private getBundleProposal;
    private getBundleInstructions;
    private downloadBundleFromArweave;
    private uploadBundleToArweave;
    private claimUploaderRole;
    private nextBundleInstructions;
    private vote;
    private logNodeInfo;
    private setupMetrics;
    private fetchPoolState;
    private checkIfNodeIsValidator;
    private setupNodeStake;
    private selfStake;
    private selfUnstake;
    private setupNodeCommission;
    private setupBundlrCron;
    private generateRandomName;
}
export default KYVE;
